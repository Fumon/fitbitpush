// Generated by CoffeeScript 1.9.3
(function() {
  define(['react', 'jquery'], function(React, $) {
    var DataRow, DataTable, SelectDate, button, div, input, label, ref, table, tbody, td, th, thead, tr;
    ref = React.DOM, div = ref.div, button = ref.button, input = ref.input, label = ref.label, thead = ref.thead, tbody = ref.tbody, table = ref.table, tr = ref.tr, td = ref.td, th = ref.th;
    SelectDate = React.createFactory(React.createClass({
      displayName: 'SelectDate',
      getInitialState: function() {
        return {
          inputval: '',
          okbtnclass: 'disabled',
          okbtnclk: null
        };
      },
      checkState: function(ev) {
        if (ev.target.value.length > 0) {
          return this.setState({
            inputval: ev.target.value,
            okbtnclass: 'button-primary',
            okbtnclk: this.fire
          });
        } else {
          return this.setState({
            inputval: '',
            okbtnclass: 'disabled',
            okbtnclk: null
          });
        }
      },
      fire: function() {
        return this.props.f({
          date: this.state.inputval
        });
      },
      render: function() {
        return div({
          className: 'row'
        }, div({
          className: 'six columns'
        }, label({
          htmlFor: 'dateInput'
        }, "Weigh-ins before:"), input({
          className: 'u-full-width',
          type: 'date',
          placeholder: 'MM/DD/YYYY',
          id: 'dateInput',
          value: this.state.inputval,
          disabled: this.state.sent,
          onChange: this.checkState
        })), div({
          className: 'six columns'
        }, button({
          className: this.props.sent ? 'disabled' : this.state.okbtnclass,
          onClick: (this.props.sent ? null : this.state.okbtnclk)
        }, "Query"), button({
          className: this.props.weightsLoaded && !this.props.sent ? 'button-primary' : 'disabled',
          onClick: (this.props.weightsLoaded && !this.props.sent ? this.props.send : null)
        }, "Send Data to Fitbit")));
      }
    }));
    DataRow = React.createFactory(React.createClass({
      displayName: 'DataRow',
      render: function() {
        return tr({}, td({}, this.props.k), td({}, this.props.v.w), td({}, this.props.v.d));
      }
    }));
    DataTable = React.createFactory(React.createClass({
      displayName: 'DataTable',
      render: function() {
        var els, key, val;
        els = (function() {
          var ref1, results;
          ref1 = this.props.data;
          results = [];
          for (key in ref1) {
            val = ref1[key];
            results.push(DataRow({
              key: key,
              k: key,
              v: val
            }));
          }
          return results;
        }).call(this);
        return div({}, table({
          className: 'u-full-width'
        }, thead({}, tr({}, th({}, "Date"), th({}, "Weight"), th({}, "Submitted"))), tbody({}, els)));
      }
    }));
    return React.createFactory(React.createClass({
      displayName: 'ReceiveBacon',
      getInitialState: function() {
        return {
          endDate: null,
          sent: false,
          weightsLoaded: false,
          weightData: null
        };
      },
      dateSet: function(s) {
        var sdate, url;
        console.log("Yay! " + s.date);
        sdate = s.date.replace(/\//g, "-");
        url = this.props.url + "/getWeights/" + sdate;
        console.log("Requesting: " + url);
        ($.get(url, (function(result) {
          var data, key, val;
          data = result;
          for (key in data) {
            val = data[key];
            data[key] = {
              w: val,
              d: 'no'
            };
          }
          return this.setState({
            weightsLoaded: true,
            weightData: data
          });
        }).bind(this))).fail(function(obj, status, err) {
          console.log("Failure: " + status);
          return console.log("   Reason: " + err);
        });
        return this.setState({
          endDate: s.date
        });
      },
      gotMessage: function(ev) {
        var d, j;
        console.log("MESSAGE:");
        console.log(ev.data);
        j = JSON.parse(ev.data);
        d = this.state.weightData;
        d[j.Date].d = j.Error;
        return this.setState({
          weightData: d
        });
      },
      sendToFitbit: function() {
        var conn, connProps, connState, setState;
        console.log("Initializing websocket");
        if (window["WebSocket"]) {
          conn = new WebSocket("ws://" + location.host + "/ws");
          connState = this.state;
          connProps = this.props;
          setState = this.setState;
          conn.onclose = function(ev) {
            console.log("Conn closed:");
            return console.dir(ev);
          };
          conn.onerror = function(ev) {
            console.log("Error in websocket:");
            console.dir(ev);
            return conn.close();
          };
          conn.onopen = function() {
            console.log("Socket Opened. Sending command!");
            return conn.send(JSON.stringify({
              EndDate: connState.endDate,
              FitToken: connProps.token,
              UserID: connProps.uid
            }));
          };
          conn.onmessage = this.gotMessage;
        } else {
          console.log("Websockets are unsupported");
        }
        console.log("Send in progress");
        return this.setState({
          sent: true,
          queryEnabled: false
        });
      },
      displayName: 'ReceiveBacon',
      render: function() {
        return div({}, SelectDate({
          f: this.dateSet,
          send: this.sendToFitbit,
          sent: this.state.sent,
          weightsLoaded: this.state.weightsLoaded
        }), DataTable({
          data: this.state.weightData
        }));
      }
    }));
  });

}).call(this);
