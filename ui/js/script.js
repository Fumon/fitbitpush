// Generated by CoffeeScript 1.9.3
(function() {
  requirejs.config({
    paths: {
      components: 'components',
      jquery: '/libs/jquery-2.1.4.min',
      react: 'https://fb.me/react-with-addons-0.13.3',
      spinner: '/libs/spin.min'
    }
  });

  require(['jquery', 'react', 'components/PushButton', 'components/ReceiveBacon', 'components/Spin'], function($, React, PushButton, ReceiveBacon, Spin) {
    var Ui, div, getParameterByName, h4, img, p, ref;
    ref = React.DOM, div = ref.div, h4 = ref.h4, p = ref.p, img = ref.img;
    getParameterByName = function(name) {
      var regex, results;
      name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
      results = regex.exec(location.hash);
      if (results === null) {
        return "";
      } else {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
      }
    };
    Ui = React.createFactory(React.createClass({
      okpressed: function(apiinfo) {
        var str;
        str = "https://www.fitbit.com/oauth2/authorize?response_type=token&client_id=" + apiinfo.clientId + "&redirect_uri=" + (encodeURIComponent(window.location.href)) + "&scope=weight";
        return window.setTimeout(function() {
          return window.location.href = str;
        }, 250);
      },
      getInitialState: function() {
        var err, ret;
        ret = {
          error: false,
          errstr: null,
          authed: false,
          authinfo: null,
          apientered: false
        };
        if (location.hash.length > 0) {
          err = getParameterByName('error');
          if (err.length > 0) {
            ret.error = true;
            ret.errstr = err;
          } else {
            ret.authed = true;
            ret.accessToken = getParameterByName('access_token');
            ret.userId = getParameterByName('user_id');
            console.log(ret.accessToken);
            console.log(ret.userId);
          }
        }
        return ret;
      },
      render: function() {
        var content;
        content = null;
        if (!this.state.apientered && !this.state.authed) {
          content = PushButton({
            buttonPress: this.okpressed
          });
        } else if (!this.state.authed) {
          content = Spin({});
        } else {
          content = ReceiveBacon({
            url: window.location.origin,
            token: this.state.accessToken,
            uid: this.state.userId
          });
        }
        return div({
          className: "container"
        }, div({
          className: "section"
        }, content));
      }
    }));
    return $(function() {
      $("#loading").remove();
      return React.render(Ui({}), document.body);
    });
  });

}).call(this);
